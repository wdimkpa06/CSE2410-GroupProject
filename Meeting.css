body {
    font-family: 'Roboto', sans-serif; /* Google Font */
    background: url('your-background-image.jpg') no-repeat center center fixed; /* Background image */
    background-size: cover; /* Cover the entire background */
    color: #333; /* Dark text for readability */
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 100vh; /* Full height */
    margin: 0;
}

#meeting-scheduler {
    background-color: rgba(255, 255, 255, 0.9); /* White background */
    padding: 30px;
    border-radius: 15px; /* Rounded corners */
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2); /* Shadow for depth */
    max-width: 400px; /* Limit width */
    width: 100%; /* Responsive width */
}

h2 {
    text-align: center; /* Center the heading */
    color: #007BFF; /* Primary color */
}

#meeting-form label {
    display: block;
    margin-top: 15px;
    font-weight: bold; /* Bold labels */
}

#meeting-form input, #meeting-form button {
    width: 100%;
    padding: 10px;
    margin-top: 8px;
    border-radius: 5px; /* Rounded corners */
    border: 1px solid #ccc; /* Light border */
}

#meeting-form input:focus {
    border-color: #007BFF; /* Border color on focus */
    outline: none; /* Remove default outline */
}

button {
    background-color: #007BFF; /* Button color */
    color: white; /* White text */
    cursor: pointer; /* Pointer cursor on hover */
    transition: background-color 0.3s; /* Smooth transition */
}

button:hover {
    background-color: #0056b3; /* Darker blue on hover */
}

#error-message {
    color: red;
    margin-top: 5px;
}

#confirmation-message {
    margin-top: 15px;
    font-weight: bold;
    color: green;
    display: none; /* Hide by default */
}

#scheduled-meetings {
    margin-top: 30px;
    width: 100%;
    max-width: 400px; /* Same width as the form */
}

#meetings-list {
    list-style-type: none;
    padding: 0;
}

#meetings-list li {
    background: #f9f9f9;
    padding: 10px;
    margin: 5px 0;
    border-radius: 5px; /* Rounded corners */
    position: relative; /* For positioning delete button */
}

button.delete {
    background-color: #dc3545; /* Red button for delete */
    color: white;
    border: none;
    border-radius: 5px;
    padding: 5px 10px;
    position: absolute;
    right: 10px; /* Position to the right */
    top: 10px;
    cursor: pointer;
}

// scheduleMeeting.js
document.getElementById("meeting-form").addEventListener("submit", function(event) {
    event.preventDefault();
    clearErrors(); // Clear previous error messages

    const title = document.getElementById("meeting-title").value;
    const participants = document.getElementById("participants").value;
    const date = document.getElementById("date").value;
    const time = document.getElementById("time").value;

    if (!validateInputs(date, time) || !validateEmails(participants)) {
        if (!validateInputs(date, time)) {
            showError(document.getElementById("date"), "Please select a valid future date and time.");
        }
        if (!validateEmails(participants)) {
            showError(document.getElementById("participants"), "Please enter valid email addresses.");
        }
        return;
    }

    addMeetingToCalendar(title, participants, date, time);
    displayMeetings();
    const confirmationMessage = document.getElementById("confirmation-message");
    confirmationMessage.innerText = "Meeting scheduled successfully!";
    confirmationMessage.style.display = "block";
    document.getElementById("meeting-form").reset();
});

function validateInputs(date, time) {
    const selectedDate = new Date(date + " " + time);
    return selectedDate > new Date(); // Ensures date is in the future
}

function validateEmails(emails) {
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emails.split(',').every(email => emailPattern.test(email.trim()));
}

function showError(input, message) {
    const error = document.createElement('div');
    error.className = 'error-message';
    error.innerText = message;
    input.parentElement.appendChild(error);
}

function clearErrors() {
    const errorMessages = document.querySelectorAll('.error-message');
    errorMessages.forEach(error => error.remove());
}

function addMeetingToCalendar(title, participants, date, time) {
    const meetings = JSON.parse(localStorage.getItem('meetings')) || [];
    meetings.push({ title, participants, date, time });
    localStorage.setItem('meetings', JSON.stringify(meetings));
}

function displayMeetings() {
    const meetingsList = document.getElementById('meetings-list');
    meetingsList.innerHTML = ''; // Clear existing list

    const meetings = JSON.parse(localStorage.getItem('meetings')) || [];
    meetings.forEach((meeting, index) => {
        const li = document.createElement('li');
        li.innerText = `${meeting.title} - ${meeting.date} at ${meeting.time} | Participants: ${meeting.participants}`;

        const deleteButton = document.createElement('button');
        deleteButton.className = 'delete';
        deleteButton.innerText = 'Delete';
        deleteButton.onclick = function() {
            deleteMeeting(index);
        };

        li.appendChild(deleteButton);
        meetingsList.appendChild(li);
    });
}
